// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String?      @unique
  name        String?
  userName    String?      @unique
  pfp         String?      
  address     String       @unique
  posts       Post[]
  clannis     Clanni[]
  accessPosts PostAccess[]
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  posts       Post[]
  clannis     Clanni[]
}

model Clanni {
  id             String  @id @default(uuid())
  name           String
  description    String?
  userId         String
  organizationId String

  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
}

model Post {
  id             String  @id @default(uuid())
  title          String
  description    String?
  likes          Int     @default(0)
  isPrivate      Boolean @default(false)
  userId         String?
  organizationId String?

  user         User?         @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  accessPosts  PostAccess[]
}

model PostAccess {
  id     String @id @default(uuid())
  postId String
  userId String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}
